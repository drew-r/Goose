{"name":"Goose","tagline":"Runtime C# compilation and integrated Lua scripting for fun and profit.","body":"# Here lives...\r\n ...the documentation for Goose, a project that combines runtime C# compilation with Lua scripting (NLua). \r\n\r\n\r\n### What does it do?\r\n\r\nGoose allows you to make use of C# classes & objects compiled at runtime, without invoking a single reflection method. This provides workable C# scripting, on the condition that you are happy to glue scripted C# components into the CLR with Lua.\r\n\r\nThis comes built on top of NLua's already excellent functionality (quite literally, the Goose VM inherits directly from NLua's), including automatic conversion between Lua and CLR primitives, Lua functions and CLR delegates (great for event handlers and callbacks) and Lua tables and CLR interfaces (dynamically implement a CLR interface with Lua) as well as support for invoking overloaded CLR methods etc.\r\n\r\n### By example...\r\n\r\n#### Compile a class\r\n_from string(s), file paths, directory paths or a combination of the above._\r\n```csharp\r\n\r\nVM vm = new Goose.VM();\r\n\r\nvm.Compile(\"HelloWorldAssembly\", new string[] { @\"\r\nusing System; \r\nusing System.Windows.Forms;\r\nnamespace HelloWorldNamespace \r\n{\r\n   public class HelloWorld \r\n   {\r\n      public void SayHello()\r\n      { \r\n         MessageBox.Show(\"\"Hello, World\"\"); \r\n      }\r\n   }\r\n}\r\n\"},\"System.Windows.Forms\");\r\n\r\n```\r\n\r\n#### Create an instance and invoke a method from Lua\r\n```csharp\r\n\r\nvm.DoString(\"h = HelloWorld()\");\r\nvm.DoString(\"h:SayHello()\");\r\n\r\n```\r\n\r\n#### or return the instance to the CLR and invoke it from there\r\n```\r\n\r\ndynamic h = vm.DoString(\"return h\")[0];\r\nh.SayHello();\r\n\r\n```\r\n\r\n\r\n\r\n\r\n","google":" ","note":"Don't delete this file! It's used internally to help with page regeneration."}