{"name":"Goose","tagline":"Runtime C# compilation and integrated Lua scripting for fun and profit.","body":"# Here lives...\r\n ...the documentation for Goose, a project that combines runtime C# compilation with Lua scripting ([NLua](nlua.org)). \r\n\r\n\r\n## What does it do?\r\n\r\nGoose allows you to make use of C# classes & objects compiled at runtime, without invoking a single reflection method. This provides workable C# scripting, on the condition that you are happy to glue scripted C# components into the CLR with Lua.\r\n\r\nThis comes built on top of NLua's already excellent functionality (quite literally, the Goose VM inherits directly from NLua's), including automatic conversion between Lua and CLR primitives, Lua functions and CLR delegates (great for event handlers and callbacks) and Lua tables and CLR interfaces (dynamically implement a CLR interface with Lua) as well as support for invoking overloaded CLR methods etc.\r\n\r\n### By example...\r\n\r\n#### Compile a class\r\n_from string(s), file paths, directory paths or a combination of the above._\r\n```csharp\r\n\r\nVM vm = new Goose.VM();\r\n\r\nvm.Compile(\"HelloWorldAssembly\", new string[] { @\"\r\nusing System; \r\nusing System.Windows.Forms;\r\nnamespace HelloWorldNamespace \r\n{\r\n   public class HelloWorld \r\n   {\r\n      public void SayHello()\r\n      { \r\n         MessageBox.Show(\"\"Hello, World\"\"); \r\n      }\r\n   }\r\n}\r\n\"},\"System.Windows.Forms\");\r\n\r\n```\r\n\r\n#### Create an instance and invoke a method from Lua\r\n```csharp\r\n\r\nvm.DoString(\"h = HelloWorld()\");\r\nvm.DoString(\"h:SayHello()\");\r\n\r\n```\r\n\r\n#### or return the instance to the CLR and invoke it from there\r\n```csharp\r\n\r\ndynamic h = vm.DoString(\"return h\")[0];\r\nh.SayHello();\r\n\r\n```\r\n\r\n#### Easily index a Lua table passed into the CLR\r\n```csharp\r\n\r\ndynamic t = vm.DoString(@\"\r\n\treturn obj({ Forename=\"\"Fred\"\", Surname=\"\"Flintstone\"\" })\r\n\")[0];\r\n\r\nConsole.WriteLine(t.Forename);\r\nConsole.WriteLine(t.Surname);\r\n\r\n\r\n```\r\n\r\n## Reference\r\n\r\n### VM _: NLua.Lua_\r\n\r\n#### Import\r\nImports an Assembly making it available at the Lua VM.\r\n```csharp\r\nvoid Import(System.Reflection.Assembly assembly)\r\n```\r\n\r\n`assembly`\r\nThe System.Reflection.Assembly to be imported.\r\n\r\n\r\n#### Compile\r\nCompiles an assembly from source. \r\n```csharp\r\nSystem.Reflection.Assembly Compile(string assemblyName, \r\n\t\t\t\t\tstring[] src,\r\n\t\t\t\t\tparams string[] references)\r\n```\r\n\r\n`assemblyName`\r\nThe name of the assembly to be built. If generating in memory is disabled, this serves as the output path for the assembly and so full file paths are acceptable. \r\n\r\n`src`\r\nThe code base. Raw C#, the path to a C# source file, or the path to a directory containing C# source files are all acceptable inputs per element.\r\n\r\n`references`\r\nAn array of identifiers referencing dependency assemblies. The identifiers will be resolved against the file system and GAC.\r\n  \r\n\r\n### Util\r\n\r\n#### ObjArrayFromTable\r\n_Lua Global arr(t)_\r\n```csharp\r\nstatic object[] ObjArrayFromTable(LuaTable t)\r\n```\r\nTransforms a `LuaTable` into an array of objects (child Lua Tables are converted via `ObjFromTable`). \r\n\r\n\r\n\r\n#### StringArrayFromTable\r\n*Lua Global str_arr(t)*\r\n```csharp\r\nstatic IEnumerable<string> StringArrayFromTable(LuaTable t)\r\n```\r\nTransforms a `LuaTable` into an array of strings (as IEnumerable<string>).\r\n\r\n\r\n#### ObjFromTable(`LuaTable` t)\r\n```csharp\r\nstatic IEnumerable<string> StringArrayFromTable(LuaTable t)\r\n```\r\nTransforms a `LuaTable` into a CLR object (`Dictionary<string, object>`) that is easily indexable via `dynamic`. \r\nUseful when passing `LuaTable`s back to the CLR. Will return an array via `ObjArrayFromTable` if it is found that the table argument is in fact a Lua array. Child tables will be converted to objects via this method recursively.\r\n\r\n\r\n## License\r\n\r\n### The MIT License (MIT)\r\n\r\n#### Copyright (c) 2014 Drew R\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":" ","note":"Don't delete this file! It's used internally to help with page regeneration."}